// Choice B: Huffman compression Program 
#include <iostream> 
#include<array>
#include<algorithm>
#include <cstdlib> 
using namespace std; 

void convertToASCII(string letter)
{
    for (int i = 0; i < letter.length(); i++)
    {
        char x = letter.at(i);
        cout << int(x) << endl;
    }
}
#define MaxTreeHeight 100 

struct MinHeapLeaf { 

	char data; 
	unsigned frequency; 
	struct MinHeapLeaf *left, *right; 
}; 

struct MinHeap {  
	unsigned size; 
	unsigned capacity;
	struct MinHeapLeaf** array; 
}; 

struct MinHeapLeaf* 
newNode(char data, unsigned frequency) 
{ 
	struct MinHeapLeaf* temp 
		= (struct MinHeapLeaf*)malloc
(sizeof(struct MinHeapLeaf)); 

	temp->left = temp->right = NULL; 
	temp->data = data; 
	temp->frequency = frequency; 

	return temp; 
} 

struct MinHeap* createHeap(unsigned capacity) 

{ 

	struct MinHeap* minHeap 
		= (struct MinHeap*)malloc(sizeof(struct MinHeap)); 

	minHeap->size = 0; 

	minHeap->capacity = capacity; 

	minHeap->array 
		= (struct MinHeapLeaf**)malloc(minHeap-> 
capacity * sizeof(struct MinHeapLeaf*)); 
	return minHeap; 
} 

void swapMinHeapLeaf(struct MinHeapLeaf** a, 
					struct MinHeapLeaf** b) 

{ 

	struct MinHeapLeaf* t = *a; 
	*a = *b; 
	*b = t; 
} 

void minHeapify(struct MinHeap* minHeap, int idx) 

{ 

	int IdxMinimum = idx; 
	int left = 2 * idx + 1; 
	int right = 2 * idx + 2; 

	if (left < minHeap->size && minHeap->array[left]-> 
frequency < minHeap->array[IdxMinimum]->frequency) 
		IdxMinimum = left; 

	if (right < minHeap->size && minHeap->array[right]-> 
frequency < minHeap->array[IdxMinimum]->frequency) 
		IdxMinimum = right; 

	if (IdxMinimum != idx) { 
		swapMinHeapLeaf(&minHeap->array[IdxMinimum], 
						&minHeap->array[idx]); 
		minHeapify(minHeap, IdxMinimum); 
	} 
} 

int isSize1(struct MinHeap* minHeap) 
{ 
	return (minHeap->size == 1); 
} 

struct MinHeapLeaf* extractMin(struct MinHeap* minHeap) 
{ 
	struct MinHeapLeaf* temp = minHeap->array[0]; 
	minHeap->array[0] 
		= minHeap->array[minHeap->size - 1]; 

	--minHeap->size; 
	minHeapify(minHeap, 0); 

	return temp; 
} 

void insertMinHeap(struct MinHeap* minHeap, 
				struct MinHeapLeaf* minHeapLeaf) 

{ 

	++minHeap->size; 
	int i = minHeap->size - 1; 

	while (i && minHeapLeaf->frequency < minHeap->array[(i - 1) / 2]->frequency) { 

		minHeap->array[i] = minHeap->array[(i - 1) / 2]; 
		i = (i - 1) / 2; 
	} 

	minHeap->array[i] = minHeapLeaf; 
} 

void buildMinHeap(struct MinHeap* minHeap) 

{ 

	int n = minHeap->size - 1; 
	int i; 

	for (i = (n - 1) / 2; i >= 0; --i) 
		minHeapify(minHeap, i); 
} 

void printArr(int arr[], int n) 
{ 
	int i; 
	for (i = 0; i < n; ++i) 
		cout<< arr[i]; 

	cout<<"\n"; 
} 
 
int isLeaf(struct MinHeapLeaf* root) 

{ 

	return !(root->left) && !(root->right); 
} 

struct MinHeap* ForgeMinHeap(char data[], int frequency[], int size) 

{ 

	struct MinHeap* minHeap = createHeap(size); 

	for (int i = 0; i < size; ++i) 
		minHeap->array[i] = newNode(data[i], frequency[i]); 

	minHeap->size = size; 
	buildMinHeap(minHeap); 

	return minHeap; 
} 

// The main part of the tree 
struct MinHeapLeaf* buildHuffmanTree(char data[], int frequency[], int size) 

 

void printCodes(struct MinHeapLeaf* root, int arr[], int top) 

{ 


	if (root->left) { 

		arr[top] = 0; 
		printCodes(root->left, arr, top + 1); 
	} 

	if (root->right) { 

		arr[top] = 1; 
		printCodes(root->right, arr, top + 1); 
	} 

	if (isLeaf(root)) { 

		cout<< root->data <<": "; 
		printArr(arr, top); 
	} 
} 

void HuffCode(char data[], int frequency[], int size) 

{ 

	struct MinHeapLeaf* root 
		= buildHuffmanTree(data, frequency, size); 
 
	int arr[MaxTreeHeight], top = 0; 

	printCodes(root, arr, top); 
} 

int main() 
{ 
  string InputText;
    cout << "Enter a 10 character Input: ";
    cin >> InputText;
    cout << "The orginal input is \n"; 
    convertToASCII(InputText) = X;

	char arr[] =  n*
	int frequency[] = i* 

	int size = sizeof(n) / sizeof (i++); 

	HuffCode(arr, frequency, size); 

	return 0; 
}
